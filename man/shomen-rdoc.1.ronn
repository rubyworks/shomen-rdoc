shomen-rdoc(1) - generate shomen documentation via rdoc
=======================================================

## SYNOPSIS

`shomen-rdoc [<options>...] [scripts...] - [documents...]`

## DESCRIPTION

The `shomen-rdoc` tool is a stand-alone command line tool that can generate
Shomen-formatted documentation from a RDoc documentation cache (e.g. `.rdococ`).

## INSTALLATION

The `shomen-rdoc` tool can be installed the via RubyGems.

    $ gem install shomen-rdoc

## INSTRUCTION

Using `shomen-rdoc` tool is similar to using the `rdoc` command line tool to generate
a `.rdoc` cache. Usage will look something likes this:

    $ shomen-rdoc -r README.rdoc -t "My Docs" lib - [A-Z]*.*

However, it is more helpful to make sure you project has a `.rdoc_options` configuration file.
This allows `shomen-rdoc` to work with minimal need of command-line options. With such in
place the command can be simplified:

    $ shomen-rdoc

The .rdoc cache can be pre-generated using RDoc.

    $ rdoc --ri --op .rdoc lib

Note that rdoc requires the `--op` option, otherwise it will store the documentation cache in
your home directory. Now Shomen can use the cache without regenerating it via the `-c` option.

    $ shomen-rdoc -c 

If the cache is stored elsewhere then the standard `.rdococ` location, inform shomen-rdoc
of the location using the `-d` option.

    $ shomen-rdoc -c -d .rdocalt

In all these examples the output has been going to stdout. To use the output we want to
save it to a file. Simply redirect the output to the file.

    $ shomen-rdoc > doc.json

It is a good idea to version your documentation.

    $ shomen-rdoc > doc/myapp-1.0.0.json

Though JSON tends to be the format used by viewers, it can also output YAML.

    $ shomen-rdoc -y > doc/myapp-1.0.0.yaml

## OPTIONS

  * `-j`, `--json`:
    Output JSON instead of YAML (default).

  * `-y`, `--yaml`:
    Output YAML instead of JSON.

  * `-d`, `--db DIR`:
    Documentation store directory (default is `.rdoc` or `.rdococ`).

  * `-c`, `--use-cache`
    Do not regenerate docs, use pre-existing cache.

  * `-s`, `--source`
    Include full source in script documentation.

  * `-w`, `--webcvs URI`:
    Prefix link to source code.

  * `-r`, `--readme`:
    Specify which document serves as the README file. If not given
    the default is the first file found that matches "README*".

  * `--markup TYPE`:
    Markup type used for comments (rdoc, md).

  * `-t`, `--title`:
    Title to be used when presenting documentation. If not given
    the title is looked for in project metadata and will fallback
    to the project's name capitalized.

  * `-F`, `--force`:
    Force overwrite of preexisting documentation.

  * `--debug`:
    Run command with Ruby's $DEBUG flag set to `true`.

  * `--warn`:
    Run with $VERBOSE set to true.

  * `--help`:
    Display command line help message.

## EXAMPLES

`shomen-rdoc`<br>
`shome-rdoc -r README.md -t "MyApp Docs" lib - [A-Z]*.*`

## RESOURCES

* [On GitHub](http://github.com/rubyworks/shomen-rdoc)

## SEE ALSO

shomen-rdoc(1)
